{
    "componentChunkName": "component---src-templates-category-js",
    "path": "/category/development",
    "result": {"data":{"allMdx":{"nodes":[{"frontmatter":{"title":"[Java] 람다: 람다 캡처링과 자유변수","description":"람다 캡처링이란 파라미터로 넘겨받은 데이터가 아닌 람다식 외부에서 선언된 변수를 참조하는 변수를 람다식 내부에 저장하고 사용하는 동작을 의미한다. 이번 글에서는 이를 둘러싼 제약사항 및 주의사항을 다루어보고자 한다.","date":"March 14, 2022","category":"development","tags":["java","lambda","functional-programming"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/6a213864b38d5082b76b6d72aaa50534/12a3e/lambda-capturing-wide.png","srcSet":"/static/6a213864b38d5082b76b6d72aaa50534/9d9e0/lambda-capturing-wide.png 225w,\n/static/6a213864b38d5082b76b6d72aaa50534/cc174/lambda-capturing-wide.png 450w,\n/static/6a213864b38d5082b76b6d72aaa50534/12a3e/lambda-capturing-wide.png 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/6a213864b38d5082b76b6d72aaa50534/3f003/lambda-capturing-wide.webp 225w,\n/static/6a213864b38d5082b76b6d72aaa50534/ba134/lambda-capturing-wide.webp 450w,\n/static/6a213864b38d5082b76b6d72aaa50534/e7f7d/lambda-capturing-wide.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"lambda capturing image"},"id":"e60349a6-9cdf-5355-985a-5cb75fc3097e","slug":"development/lambda-capturing-and-free-variable/"},{"frontmatter":{"title":"[Git] 저장소, 브랜치, 커밋 파고들기","description":"로컬저장소와 원격저장소는 어떠한 관계에 있는가? 서로 다른 브랜치가 동기화되기 위한 조건은 무엇인가? 동기화 없이 원격저장소의 브랜치를 조회할 수는 없는가? 브랜치를 rebase로 통합하게 되면 동일한 커밋이 그대로 브랜치에 추가되는 것이 맞는가?","date":"February 19, 2022","category":"development","tags":["git","github"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/1bc9e613279a5633cd9ce50974494ad7/12a3e/git-github.png","srcSet":"/static/1bc9e613279a5633cd9ce50974494ad7/9d9e0/git-github.png 225w,\n/static/1bc9e613279a5633cd9ce50974494ad7/cc174/git-github.png 450w,\n/static/1bc9e613279a5633cd9ce50974494ad7/12a3e/git-github.png 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/1bc9e613279a5633cd9ce50974494ad7/3f003/git-github.webp 225w,\n/static/1bc9e613279a5633cd9ce50974494ad7/ba134/git-github.webp 450w,\n/static/1bc9e613279a5633cd9ce50974494ad7/e7f7d/git-github.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"git & github image"},"id":"df8524ae-ccdc-586d-83c6-022384a05e0d","slug":"development/git-commit-branch-repository/"},{"frontmatter":{"title":"[JS] 프록시 패턴과 프런트엔드 커스텀 캐쉬 구현","description":"애플리케이션 외부 대상을 대리자를 통해 간접적으로 접근하는 방식으로 프록시 패턴이 사용될 수 있다. 대리자는 외부 서버로부터 받은 데이터와 그 유효기간을 캐쉬의 형태로 관리함으로써 서버에 대한 접근 빈도를 줄이고 과한 리소스 낭비를 절감할 수 있다.","date":"February 5, 2022","category":"development","tags":["proxy","design-pattern","cache","web","javascript"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181828","images":{"fallback":{"src":"/static/0ddf8960f7822926e01c4124f7615c90/12a3e/proxy-pattern-wide.png","srcSet":"/static/0ddf8960f7822926e01c4124f7615c90/9d9e0/proxy-pattern-wide.png 225w,\n/static/0ddf8960f7822926e01c4124f7615c90/cc174/proxy-pattern-wide.png 450w,\n/static/0ddf8960f7822926e01c4124f7615c90/12a3e/proxy-pattern-wide.png 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/0ddf8960f7822926e01c4124f7615c90/3f003/proxy-pattern-wide.webp 225w,\n/static/0ddf8960f7822926e01c4124f7615c90/ba134/proxy-pattern-wide.webp 450w,\n/static/0ddf8960f7822926e01c4124f7615c90/e7f7d/proxy-pattern-wide.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"proxy pattern image"},"id":"ae3071f0-43e8-57fc-958a-d085bb7bc274","slug":"development/proxy-and-frontend-custom-cache/"},{"frontmatter":{"title":"[JS] 싱글톤 패턴과 React 상태 관리","description":"자바스크립트의 클래스 문법은 다른 객체지향언어들을 흉내내기 위해 등장한 문법적 설탕일 뿐이다. 때문에 굳이 클래스를 정의하고, 클래스를 통해 인스턴스를 생성하는 등 자바에서의 싱글톤 패턴을 억지로 모방하는 것은 안티패턴이라고 볼 수 있다.","date":"January 18, 2022","category":"development","tags":["singleton","design-pattern","state-management","web","javascript"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181828","images":{"fallback":{"src":"/static/c23284dc8c46f8696c1110eba57d94a0/12a3e/singleton-wide.png","srcSet":"/static/c23284dc8c46f8696c1110eba57d94a0/9d9e0/singleton-wide.png 225w,\n/static/c23284dc8c46f8696c1110eba57d94a0/cc174/singleton-wide.png 450w,\n/static/c23284dc8c46f8696c1110eba57d94a0/12a3e/singleton-wide.png 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/c23284dc8c46f8696c1110eba57d94a0/3f003/singleton-wide.webp 225w,\n/static/c23284dc8c46f8696c1110eba57d94a0/ba134/singleton-wide.webp 450w,\n/static/c23284dc8c46f8696c1110eba57d94a0/e7f7d/singleton-wide.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"singleton pattern image"},"id":"5f5b51f8-dce3-5efc-a8bd-963f937e6596","slug":"development/singleton-and-react-state-management/"}],"pageInfo":{"currentPage":1,"hasNextPage":false,"hasPreviousPage":false,"pageCount":1,"totalCount":4}}},"pageContext":{"slug":"development","ko":"개발","en":"Development","skip":0}},
    "staticQueryHashes": ["1903006949","2193720160"]}