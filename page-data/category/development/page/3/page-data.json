{
    "componentChunkName": "component---src-templates-category-js",
    "path": "/category/development/page/3",
    "result": {"data":{"allMdx":{"nodes":[{"frontmatter":{"title":"[Java] 값 객체: 동등성과 동일성","description":"동등성과 동일성 개념을 토대로 값과 객체를 비교해보고, 값 객체에 대해 이해해보자. 로또 번호와 위치 정보를 값 객체로 구현해보고, 체스말의 이동경로 검증 예시를 통해 값 객체가 지니는 이점에 대해 알아보자.","date":"April 9, 2022","category":"development","tags":["java","value-object","object","oop"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/7b7817b3ed441a4700ba4673be9e260a/12a3e/value-object-wide.png","srcSet":"/static/7b7817b3ed441a4700ba4673be9e260a/9d9e0/value-object-wide.png 225w,\n/static/7b7817b3ed441a4700ba4673be9e260a/cc174/value-object-wide.png 450w,\n/static/7b7817b3ed441a4700ba4673be9e260a/12a3e/value-object-wide.png 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/7b7817b3ed441a4700ba4673be9e260a/3f003/value-object-wide.webp 225w,\n/static/7b7817b3ed441a4700ba4673be9e260a/ba134/value-object-wide.webp 450w,\n/static/7b7817b3ed441a4700ba4673be9e260a/e7f7d/value-object-wide.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"value object image"},"id":"ada49ef6-4774-589e-99bc-5a96cd5cef07","slug":"development/value-object/"},{"frontmatter":{"title":"[Java] 스트림 기초: I/O Stream과 Stream API","description":"Stream API을 통해 생성되는 스트림은 말 그대로 '데이터의 흐름'이다. 이 흐름이라는 개념에 포함된 다양한 의미 중 가장 중요한 것은 스트림이 흘러가는 과정에서 데이터가 순차적으로 사용되고 사라진다는 점이다.","date":"March 21, 2022","category":"development","tags":["java","stream","modern-java"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/c14bda83973ba8919bd7034a4392c8ac/12a3e/java-stream-wide.png","srcSet":"/static/c14bda83973ba8919bd7034a4392c8ac/9d9e0/java-stream-wide.png 225w,\n/static/c14bda83973ba8919bd7034a4392c8ac/cc174/java-stream-wide.png 450w,\n/static/c14bda83973ba8919bd7034a4392c8ac/12a3e/java-stream-wide.png 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/c14bda83973ba8919bd7034a4392c8ac/3f003/java-stream-wide.webp 225w,\n/static/c14bda83973ba8919bd7034a4392c8ac/ba134/java-stream-wide.webp 450w,\n/static/c14bda83973ba8919bd7034a4392c8ac/e7f7d/java-stream-wide.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"java stream image"},"id":"bd9cc134-41dc-5942-8baa-e7411118b121","slug":"development/stream-and-java/"},{"frontmatter":{"title":"[Java] 람다: 람다 캡처링","description":"람다 캡처링이란 파라미터로 넘겨받은 데이터가 아닌 람다식 외부에서 선언된 변수를 참조하는 변수를 람다식 내부에 저장하고 사용하는 동작을 의미한다. 이번 글에서는 이를 둘러싼 제약사항 및 주의사항을 다루어보고자 한다.","date":"March 14, 2022","category":"development","tags":["java","lambda","modern-java","functional-programming"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/6a213864b38d5082b76b6d72aaa50534/12a3e/lambda-capturing-wide.png","srcSet":"/static/6a213864b38d5082b76b6d72aaa50534/9d9e0/lambda-capturing-wide.png 225w,\n/static/6a213864b38d5082b76b6d72aaa50534/cc174/lambda-capturing-wide.png 450w,\n/static/6a213864b38d5082b76b6d72aaa50534/12a3e/lambda-capturing-wide.png 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/6a213864b38d5082b76b6d72aaa50534/3f003/lambda-capturing-wide.webp 225w,\n/static/6a213864b38d5082b76b6d72aaa50534/ba134/lambda-capturing-wide.webp 450w,\n/static/6a213864b38d5082b76b6d72aaa50534/e7f7d/lambda-capturing-wide.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"lambda capturing image"},"id":"95d3bb51-17a5-55ff-a659-0f0d765455d9","slug":"development/lambda-capturing-and-free-variable/"},{"frontmatter":{"title":"[JS] 프록시 패턴과 프런트엔드 커스텀 캐쉬 구현","description":"애플리케이션 외부 대상을 대리자를 통해 간접적으로 접근하는 방식으로 프록시 패턴이 사용될 수 있다. 대리자는 외부 서버로부터 받은 데이터와 그 유효기간을 캐쉬의 형태로 관리함으로써 서버에 대한 접근 빈도를 줄이고 과한 리소스 낭비를 절감할 수 있다.","date":"February 5, 2022","category":"development","tags":["proxy","design-pattern","cache","web","javascript"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181828","images":{"fallback":{"src":"/static/0ddf8960f7822926e01c4124f7615c90/12a3e/proxy-pattern-wide.png","srcSet":"/static/0ddf8960f7822926e01c4124f7615c90/9d9e0/proxy-pattern-wide.png 225w,\n/static/0ddf8960f7822926e01c4124f7615c90/cc174/proxy-pattern-wide.png 450w,\n/static/0ddf8960f7822926e01c4124f7615c90/12a3e/proxy-pattern-wide.png 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/0ddf8960f7822926e01c4124f7615c90/3f003/proxy-pattern-wide.webp 225w,\n/static/0ddf8960f7822926e01c4124f7615c90/ba134/proxy-pattern-wide.webp 450w,\n/static/0ddf8960f7822926e01c4124f7615c90/e7f7d/proxy-pattern-wide.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"proxy pattern image"},"id":"d05af6cc-0cbe-5b2b-b382-89dfff81b56e","slug":"development/proxy-and-frontend-custom-cache/"},{"frontmatter":{"title":"[JS] 싱글톤 패턴과 React 상태 관리","description":"자바스크립트의 클래스 문법은 다른 객체지향언어들을 흉내내기 위해 등장한 문법적 설탕일 뿐이다. 때문에 굳이 클래스를 정의하고, 클래스를 통해 인스턴스를 생성하는 등 자바에서의 싱글톤 패턴을 억지로 모방하는 것은 안티패턴이라고 볼 수 있다.","date":"January 18, 2022","category":"development","tags":["singleton","design-pattern","state-management","web","javascript"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181828","images":{"fallback":{"src":"/static/c23284dc8c46f8696c1110eba57d94a0/12a3e/singleton-wide.png","srcSet":"/static/c23284dc8c46f8696c1110eba57d94a0/9d9e0/singleton-wide.png 225w,\n/static/c23284dc8c46f8696c1110eba57d94a0/cc174/singleton-wide.png 450w,\n/static/c23284dc8c46f8696c1110eba57d94a0/12a3e/singleton-wide.png 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/c23284dc8c46f8696c1110eba57d94a0/3f003/singleton-wide.webp 225w,\n/static/c23284dc8c46f8696c1110eba57d94a0/ba134/singleton-wide.webp 450w,\n/static/c23284dc8c46f8696c1110eba57d94a0/e7f7d/singleton-wide.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"singleton pattern image"},"id":"4f43ecde-c0c5-5fbb-835e-087919dee5a1","slug":"development/singleton-and-react-state-management/"}],"pageInfo":{"currentPage":3,"hasNextPage":false,"hasPreviousPage":true,"pageCount":3,"totalCount":25}}},"pageContext":{"slug":"development","ko":"개발","en":"Development","skip":20}},
    "staticQueryHashes": ["1903006949","2193720160"]}