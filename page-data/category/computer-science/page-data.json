{
    "componentChunkName": "component---src-templates-category-js",
    "path": "/category/computer-science",
    "result": {"data":{"allMdx":{"nodes":[{"frontmatter":{"title":"[알고리즘] 재귀와 반복","description":"팩토리얼, 거듭제곱, 피보나치 수열 예시를 통해 재귀호출에 대해 가볍게 정리합니다. 이를 통해 어떤 상황에서 재귀호출이 효율적이고, 어떤 상황에서 단순한 반복문이 더 효율적일 수 있는지 알아봅니다.","date":"November 11, 2023","category":"computer-science","tags":["algorithm","recursion","factorial","fibonacci"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/80b38bb5e6d529f2a3d5e418bac0f019/12a3e/recursion-wide.png","srcSet":"/static/80b38bb5e6d529f2a3d5e418bac0f019/9d9e0/recursion-wide.png 225w,\n/static/80b38bb5e6d529f2a3d5e418bac0f019/cc174/recursion-wide.png 450w,\n/static/80b38bb5e6d529f2a3d5e418bac0f019/12a3e/recursion-wide.png 900w,\n/static/80b38bb5e6d529f2a3d5e418bac0f019/4dd11/recursion-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/80b38bb5e6d529f2a3d5e418bac0f019/3f003/recursion-wide.webp 225w,\n/static/80b38bb5e6d529f2a3d5e418bac0f019/ba134/recursion-wide.webp 450w,\n/static/80b38bb5e6d529f2a3d5e418bac0f019/e7f7d/recursion-wide.webp 900w,\n/static/80b38bb5e6d529f2a3d5e418bac0f019/fc420/recursion-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"recursion image"},"id":"7ef4364e-c477-5fec-9c2c-ad1612f4103c","slug":"computer-science/recursion-and-iteration/"},{"frontmatter":{"title":"[OS] 멀티쓰레딩 모델","description":"유저 쓰레드와 OS 쓰레드 간의 관계가 Many-to-One, One-to-One, Many-to-Many일 때 각각 어떠한 차이를 지니는지 압축적으로 정리합니다. 고루틴, 코루틴, 쓰레드풀, 자바의 가상 쓰레드 등의 아키텍처를 이해하는 데 필요한 배경지식을 다룹니다.","date":"October 15, 2023","category":"computer-science","tags":["operating-system","thread","thread-pool","multi-threading","concurrency","java","virtual-thread","go","goroutine"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/9a9ee4c1b7551795a6ccd83fdf99b36f/12a3e/multi-threading-models-wide.png","srcSet":"/static/9a9ee4c1b7551795a6ccd83fdf99b36f/9d9e0/multi-threading-models-wide.png 225w,\n/static/9a9ee4c1b7551795a6ccd83fdf99b36f/cc174/multi-threading-models-wide.png 450w,\n/static/9a9ee4c1b7551795a6ccd83fdf99b36f/12a3e/multi-threading-models-wide.png 900w,\n/static/9a9ee4c1b7551795a6ccd83fdf99b36f/4dd11/multi-threading-models-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/9a9ee4c1b7551795a6ccd83fdf99b36f/3f003/multi-threading-models-wide.webp 225w,\n/static/9a9ee4c1b7551795a6ccd83fdf99b36f/ba134/multi-threading-models-wide.webp 450w,\n/static/9a9ee4c1b7551795a6ccd83fdf99b36f/e7f7d/multi-threading-models-wide.webp 900w,\n/static/9a9ee4c1b7551795a6ccd83fdf99b36f/fc420/multi-threading-models-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"multi threading models image"},"id":"698eb25a-2091-5276-b13d-cb2378ba7232","slug":"computer-science/multi-threading-models/"},{"frontmatter":{"title":"[OS] 쓰레드의 종류","description":"하드웨어, OS 커널, 유저 레벨에서의 쓰레드들이 서로 어떻게 다른지 가볍게 정리합니다.","date":"October 14, 2023","category":"computer-science","tags":["operating-system","thread"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/c82337dd4e60e45728ec82ca7c7a5089/12a3e/thread-types-wide.png","srcSet":"/static/c82337dd4e60e45728ec82ca7c7a5089/9d9e0/thread-types-wide.png 225w,\n/static/c82337dd4e60e45728ec82ca7c7a5089/cc174/thread-types-wide.png 450w,\n/static/c82337dd4e60e45728ec82ca7c7a5089/12a3e/thread-types-wide.png 900w,\n/static/c82337dd4e60e45728ec82ca7c7a5089/4dd11/thread-types-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/c82337dd4e60e45728ec82ca7c7a5089/3f003/thread-types-wide.webp 225w,\n/static/c82337dd4e60e45728ec82ca7c7a5089/ba134/thread-types-wide.webp 450w,\n/static/c82337dd4e60e45728ec82ca7c7a5089/e7f7d/thread-types-wide.webp 900w,\n/static/c82337dd4e60e45728ec82ca7c7a5089/fc420/thread-types-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"thread types image"},"id":"b8c257fb-11d7-5599-ba19-a3bf71f4535b","slug":"computer-science/thread-types/"},{"frontmatter":{"title":"서킷 브레이커 패턴의 필요성과 구조","description":"재시도 패턴과 연쇄적 실패 문제를 토대로 서킷 브레이커 패턴의 필요성에 대해 설명하고, 서킷 브레이커의 기본 구조에 대해 간략히 정리하겠습니다.","date":"October 12, 2023","category":"computer-science","tags":["circuit-breaker","finite-state-machine","retry-pattern","cascade-failure","design-pattern"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/ffb8725258230949a365619c88539c44/12a3e/circuit-breaker-pattern-wide.png","srcSet":"/static/ffb8725258230949a365619c88539c44/9d9e0/circuit-breaker-pattern-wide.png 225w,\n/static/ffb8725258230949a365619c88539c44/cc174/circuit-breaker-pattern-wide.png 450w,\n/static/ffb8725258230949a365619c88539c44/12a3e/circuit-breaker-pattern-wide.png 900w,\n/static/ffb8725258230949a365619c88539c44/4dd11/circuit-breaker-pattern-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/ffb8725258230949a365619c88539c44/3f003/circuit-breaker-pattern-wide.webp 225w,\n/static/ffb8725258230949a365619c88539c44/ba134/circuit-breaker-pattern-wide.webp 450w,\n/static/ffb8725258230949a365619c88539c44/e7f7d/circuit-breaker-pattern-wide.webp 900w,\n/static/ffb8725258230949a365619c88539c44/fc420/circuit-breaker-pattern-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"circuit breaker pattern image"},"id":"5b9f3852-5d55-57f0-875f-b4dd1294d52b","slug":"computer-science/circuit-breaker-pattern/"},{"frontmatter":{"title":"[Couchbase] CAS 기반 낙관적 락킹","description":"낙관적 락킹과 비관적 락킹에 대해 정리하고, 카우치베이스에서 제공하는 CAS 기반 낙관적 락킹에 대해 실습 코드와 함께 정리해봅니다.","date":"October 10, 2023","category":"computer-science","tags":["couchbase","cas","concurrency-control","optimistic-lock"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/7d22098201c7fadb5d72fb1391a883dd/12a3e/optimistic-locking-with-cas-wide.png","srcSet":"/static/7d22098201c7fadb5d72fb1391a883dd/9d9e0/optimistic-locking-with-cas-wide.png 225w,\n/static/7d22098201c7fadb5d72fb1391a883dd/cc174/optimistic-locking-with-cas-wide.png 450w,\n/static/7d22098201c7fadb5d72fb1391a883dd/12a3e/optimistic-locking-with-cas-wide.png 900w,\n/static/7d22098201c7fadb5d72fb1391a883dd/4dd11/optimistic-locking-with-cas-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/7d22098201c7fadb5d72fb1391a883dd/3f003/optimistic-locking-with-cas-wide.webp 225w,\n/static/7d22098201c7fadb5d72fb1391a883dd/ba134/optimistic-locking-with-cas-wide.webp 450w,\n/static/7d22098201c7fadb5d72fb1391a883dd/e7f7d/optimistic-locking-with-cas-wide.webp 900w,\n/static/7d22098201c7fadb5d72fb1391a883dd/fc420/optimistic-locking-with-cas-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"optimistic locking with cas image"},"id":"a135440e-2f93-5edb-8f52-89f95537ee6c","slug":"computer-science/optimistic-locking-with-cas/"},{"frontmatter":{"title":"쇼트서킷의 정의와 예시","description":"쇼트서킷에 대해 검색해보면 논리연산자의 동작방식이라고 설명하는 글을 종종 찾아볼 수 있습니다. 그러나 쇼트서킷은 논리연산자에 한정된 개념이라고 보기 어렵습니다. 몇 가지 간단한 예시를 통해 쇼트서킷이라는 개념에 대해 가볍게 알아봅시다.","date":"January 29, 2023","category":"computer-science","tags":["short-circuit"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/cfda061f03de401e9d82145253a135bd/12a3e/short-circuit-wide.png","srcSet":"/static/cfda061f03de401e9d82145253a135bd/9d9e0/short-circuit-wide.png 225w,\n/static/cfda061f03de401e9d82145253a135bd/cc174/short-circuit-wide.png 450w,\n/static/cfda061f03de401e9d82145253a135bd/12a3e/short-circuit-wide.png 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/cfda061f03de401e9d82145253a135bd/3f003/short-circuit-wide.webp 225w,\n/static/cfda061f03de401e9d82145253a135bd/ba134/short-circuit-wide.webp 450w,\n/static/cfda061f03de401e9d82145253a135bd/e7f7d/short-circuit-wide.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"short circuit image"},"id":"6d9b0241-f24b-5be3-b3b0-a3f5e5ff5f26","slug":"computer-science/short-circuit/"},{"frontmatter":{"title":"[OOP] SOLID 압축 정리본","description":"우아한테크코스 레벨 인터뷰 준비 과정에서 작성한 SOLID에 대한 개념 정리이다. 너무 깊지도, 얕지도 않도록 최소한의 예제만을 활용한 압축본을 만드는 것을 목표로 하였다. 오브젝트 스터디 종료 후 수정할 계획이다.","date":"April 26, 2022","category":"computer-science","tags":["oop","srp","ocp","lsp","isp","dip"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/782dfc0465da57291e95692f6860f8f8/12a3e/solid-wide.png","srcSet":"/static/782dfc0465da57291e95692f6860f8f8/9d9e0/solid-wide.png 225w,\n/static/782dfc0465da57291e95692f6860f8f8/cc174/solid-wide.png 450w,\n/static/782dfc0465da57291e95692f6860f8f8/12a3e/solid-wide.png 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/782dfc0465da57291e95692f6860f8f8/3f003/solid-wide.webp 225w,\n/static/782dfc0465da57291e95692f6860f8f8/ba134/solid-wide.webp 450w,\n/static/782dfc0465da57291e95692f6860f8f8/e7f7d/solid-wide.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"solid image"},"id":"31c53484-fab6-5a85-866c-46c21dd3e22c","slug":"computer-science/solid-basics/"},{"frontmatter":{"title":"클래스와 프로토타입에 담긴 철학","description":"우테코 강의 중 클래스라는 개념이 플라톤의 이데아 개념에 기반을 두고 있다는 내용이 나왔다. 다만, 코치님이 이 부분에 대해 너무 가볍게 다룬 것 같아 정말 마음이 아팠다. 그런 의미에서 그 분이 쏘아올린 작은 공을 살짝 리시브해보고자 한다.","date":"February 17, 2022","category":"computer-science","tags":["oop","philosophy","java","javascript"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/5c5b393bfd433e110e2ef9c24ca5ace1/ba2c4/plato-wittgenstein.jpg","srcSet":"/static/5c5b393bfd433e110e2ef9c24ca5ace1/70c4d/plato-wittgenstein.jpg 185w,\n/static/5c5b393bfd433e110e2ef9c24ca5ace1/bfbf1/plato-wittgenstein.jpg 370w,\n/static/5c5b393bfd433e110e2ef9c24ca5ace1/ba2c4/plato-wittgenstein.jpg 740w","sizes":"(min-width: 740px) 740px, 100vw"},"sources":[{"srcSet":"/static/5c5b393bfd433e110e2ef9c24ca5ace1/a3685/plato-wittgenstein.webp 185w,\n/static/5c5b393bfd433e110e2ef9c24ca5ace1/3c007/plato-wittgenstein.webp 370w,\n/static/5c5b393bfd433e110e2ef9c24ca5ace1/177c9/plato-wittgenstein.webp 740w","type":"image/webp","sizes":"(min-width: 740px) 740px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"plato vs wittgenstein image"},"id":"a82b0dda-ae9d-5433-8cba-ee1668edced3","slug":"computer-science/class-vs-prototype-philosophy/"},{"frontmatter":{"title":"메모리 회로의 핵심: 플립플롭의 이해","description":"오늘은 입력값으로부터 0과 1이라는 출력값을 만들어내고, 외부로부터의 입력이 사라지더라도 그 출력값을 그대로 유지하는 구조의 회로에 대해 이야기해보고자 한다. 다양한 구조의 래치를 차근차근 살펴보며 최종적으로 D 플립플롭을 자세히 이해해보자.","date":"January 13, 2022","category":"computer-science","tags":["memory","computer","computer-architecture","hardware","circuit"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/76f2f1dbdf87fa66ca1d8880c028a7f6/12a3e/d-flip-flop-wide.png","srcSet":"/static/76f2f1dbdf87fa66ca1d8880c028a7f6/9d9e0/d-flip-flop-wide.png 225w,\n/static/76f2f1dbdf87fa66ca1d8880c028a7f6/cc174/d-flip-flop-wide.png 450w,\n/static/76f2f1dbdf87fa66ca1d8880c028a7f6/12a3e/d-flip-flop-wide.png 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/76f2f1dbdf87fa66ca1d8880c028a7f6/3f003/d-flip-flop-wide.webp 225w,\n/static/76f2f1dbdf87fa66ca1d8880c028a7f6/ba134/d-flip-flop-wide.webp 450w,\n/static/76f2f1dbdf87fa66ca1d8880c028a7f6/e7f7d/d-flip-flop-wide.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"D flip flop image"},"id":"c5cb51f5-ac6f-5e56-a9ec-3b7063281488","slug":"computer-science/latch-and-flip-flop/"},{"frontmatter":{"title":"아날로그에서 디지털로: 회로의 기초","description":"회로란 안정성을 위해 현실에 존재하는 아날로그적인 자극을 디지털적인 동작으로 바꿔주는 도구라고 볼 수 있다. 이산적인 데이터를 일관된 논리에 따라 적절하게 활용하면 매번 동일한 입력값에 대해 동일한 출력값을 안정적으로 도출해낼 수 있게 된다.","date":"January 10, 2022","category":"computer-science","tags":["computer","computer-architecture","hardware","circuit"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/1a66d612516cb42d0865579e59146570/12a3e/clipping-wide.png","srcSet":"/static/1a66d612516cb42d0865579e59146570/9d9e0/clipping-wide.png 225w,\n/static/1a66d612516cb42d0865579e59146570/cc174/clipping-wide.png 450w,\n/static/1a66d612516cb42d0865579e59146570/12a3e/clipping-wide.png 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/1a66d612516cb42d0865579e59146570/3f003/clipping-wide.webp 225w,\n/static/1a66d612516cb42d0865579e59146570/ba134/clipping-wide.webp 450w,\n/static/1a66d612516cb42d0865579e59146570/e7f7d/clipping-wide.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"transfer function clipping image"},"id":"549dc124-d678-5727-9101-6d3350199d44","slug":"computer-science/analog-and-digital/"}],"pageInfo":{"currentPage":1,"hasNextPage":true,"hasPreviousPage":false,"pageCount":2,"totalCount":11}}},"pageContext":{"slug":"computer-science","ko":"컴퓨터과학","en":"Computer Science","skip":0}},
    "staticQueryHashes": ["1903006949","2193720160"]}