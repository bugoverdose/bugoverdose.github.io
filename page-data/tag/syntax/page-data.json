{
    "componentChunkName": "component---src-templates-tag-js",
    "path": "/tag/syntax",
    "result": {"data":{"allMdx":{"nodes":[{"frontmatter":{"title":"[C++] 가상 소멸자와 메모리 누수","description":"소멸자 문법에 대해 간략히 정리하고 소멸자를 통해 메모리 누수를 방지하는 방법에 대해 알아봅니다. 상속 문법의 경우 최상위 클래스에 가상 소멸자를 정의해야 하는 경우와 필요성에 대해 정리해봅니다.","date":"June 9, 2024","category":"development","tags":["cpp","destructor","virtual-keyword","virtual-destructor","memory-leak","syntax"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/90bcfbb4028bb5d2db8b5ecb38fedec5/12a3e/cpp-destructor-and-memory-leak-wide.png","srcSet":"/static/90bcfbb4028bb5d2db8b5ecb38fedec5/9d9e0/cpp-destructor-and-memory-leak-wide.png 225w,\n/static/90bcfbb4028bb5d2db8b5ecb38fedec5/cc174/cpp-destructor-and-memory-leak-wide.png 450w,\n/static/90bcfbb4028bb5d2db8b5ecb38fedec5/12a3e/cpp-destructor-and-memory-leak-wide.png 900w,\n/static/90bcfbb4028bb5d2db8b5ecb38fedec5/4dd11/cpp-destructor-and-memory-leak-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/90bcfbb4028bb5d2db8b5ecb38fedec5/3f003/cpp-destructor-and-memory-leak-wide.webp 225w,\n/static/90bcfbb4028bb5d2db8b5ecb38fedec5/ba134/cpp-destructor-and-memory-leak-wide.webp 450w,\n/static/90bcfbb4028bb5d2db8b5ecb38fedec5/e7f7d/cpp-destructor-and-memory-leak-wide.webp 900w,\n/static/90bcfbb4028bb5d2db8b5ecb38fedec5/fc420/cpp-destructor-and-memory-leak-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"cpp destructor and memory leak image"},"id":"be99e8cc-613a-57e8-912a-43b9b53fc961","slug":"development/cpp-destructor-and-memory-leak/"},{"frontmatter":{"title":"[C++] 접근제어자와 상속","description":"C++에서는 상위클래스의 멤버들을 상속받을 때 접근제어자를 변형시킬 수 있는 문법을 제공합니다. 접근제어자들에 대해 가볍게 다루고, public 상속, protected 상속, private 상속에 대해 정리해보겠습니다.","date":"June 8, 2024","category":"development","tags":["cpp","access-modifier","public-keyword","protected-keyword","private-keyword","inheritance","syntax"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/20e762b9d09e6ba2ad7ce65c6f144813/12a3e/cpp-access-modifier-and-inheritance-wide.png","srcSet":"/static/20e762b9d09e6ba2ad7ce65c6f144813/9d9e0/cpp-access-modifier-and-inheritance-wide.png 225w,\n/static/20e762b9d09e6ba2ad7ce65c6f144813/cc174/cpp-access-modifier-and-inheritance-wide.png 450w,\n/static/20e762b9d09e6ba2ad7ce65c6f144813/12a3e/cpp-access-modifier-and-inheritance-wide.png 900w,\n/static/20e762b9d09e6ba2ad7ce65c6f144813/4dd11/cpp-access-modifier-and-inheritance-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/20e762b9d09e6ba2ad7ce65c6f144813/3f003/cpp-access-modifier-and-inheritance-wide.webp 225w,\n/static/20e762b9d09e6ba2ad7ce65c6f144813/ba134/cpp-access-modifier-and-inheritance-wide.webp 450w,\n/static/20e762b9d09e6ba2ad7ce65c6f144813/e7f7d/cpp-access-modifier-and-inheritance-wide.webp 900w,\n/static/20e762b9d09e6ba2ad7ce65c6f144813/fc420/cpp-access-modifier-and-inheritance-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"cpp access modifier and inheritance image"},"id":"37d98096-52c5-514f-a340-6d1806f80e49","slug":"development/cpp-access-modifier-and-inheritance/"},{"frontmatter":{"title":"[C++] 다형성과 가상 함수","description":"C++에서 다형성을 구현하기 위해 필수적으로 알아야 하는 기초 개념 및 문법을 간단히 정리하였습니다. 추가로 Java와의 비교를 통해 가상함수의 필요성을 정리하였습니다.","date":"June 8, 2024","category":"development","tags":["cpp","polymorphism","polymorphic-class","virtual-function","virtual-keyword","syntax","java"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/235bd275b6e4b3c0be12bec9b2d742d1/12a3e/cpp-polymorphism-and-virtual-function-wide.png","srcSet":"/static/235bd275b6e4b3c0be12bec9b2d742d1/9d9e0/cpp-polymorphism-and-virtual-function-wide.png 225w,\n/static/235bd275b6e4b3c0be12bec9b2d742d1/cc174/cpp-polymorphism-and-virtual-function-wide.png 450w,\n/static/235bd275b6e4b3c0be12bec9b2d742d1/12a3e/cpp-polymorphism-and-virtual-function-wide.png 900w,\n/static/235bd275b6e4b3c0be12bec9b2d742d1/4dd11/cpp-polymorphism-and-virtual-function-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/235bd275b6e4b3c0be12bec9b2d742d1/3f003/cpp-polymorphism-and-virtual-function-wide.webp 225w,\n/static/235bd275b6e4b3c0be12bec9b2d742d1/ba134/cpp-polymorphism-and-virtual-function-wide.webp 450w,\n/static/235bd275b6e4b3c0be12bec9b2d742d1/e7f7d/cpp-polymorphism-and-virtual-function-wide.webp 900w,\n/static/235bd275b6e4b3c0be12bec9b2d742d1/fc420/cpp-polymorphism-and-virtual-function-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"cpp polymorphism and virtual function image"},"id":"a334dea1-745b-55db-999f-3f110318cce0","slug":"development/cpp-polymorphism-and-virtual-function/"},{"frontmatter":{"title":"[C++] 복사 생성자 문법","description":"C++의 복사 생성자는 매개변수로 같은 타입의 객체를 넘겨받고 그 내용을 복사하여 생성하는 생성자입니다. 복사 생성자의 호출 시점, 디폴트 복사 생성자, 얕은 복사와 깊은 복사, explicit 키워드에 대해 정리하겠습니다.","date":"May 28, 2024","category":"development","tags":["cpp","copy-constructor","explicit-keyword","shallow-copy","deep-copy","syntax"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/2f86c9d2a7d8fbc75d1df79e1f68ea22/12a3e/cpp-copy-constructor-syntax-wide.png","srcSet":"/static/2f86c9d2a7d8fbc75d1df79e1f68ea22/9d9e0/cpp-copy-constructor-syntax-wide.png 225w,\n/static/2f86c9d2a7d8fbc75d1df79e1f68ea22/cc174/cpp-copy-constructor-syntax-wide.png 450w,\n/static/2f86c9d2a7d8fbc75d1df79e1f68ea22/12a3e/cpp-copy-constructor-syntax-wide.png 900w,\n/static/2f86c9d2a7d8fbc75d1df79e1f68ea22/4dd11/cpp-copy-constructor-syntax-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/2f86c9d2a7d8fbc75d1df79e1f68ea22/3f003/cpp-copy-constructor-syntax-wide.webp 225w,\n/static/2f86c9d2a7d8fbc75d1df79e1f68ea22/ba134/cpp-copy-constructor-syntax-wide.webp 450w,\n/static/2f86c9d2a7d8fbc75d1df79e1f68ea22/e7f7d/cpp-copy-constructor-syntax-wide.webp 900w,\n/static/2f86c9d2a7d8fbc75d1df79e1f68ea22/fc420/cpp-copy-constructor-syntax-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"cpp copy constructor syntax image"},"id":"6c5c012b-2304-5a29-a9e9-dcb1f44c4d99","slug":"development/cpp-copy-constructor-syntax/"},{"frontmatter":{"title":"[C++] 참조자 문법 정리","description":"C++에서 참조자는 특정 변수가 가리키는 메모리 공간을 가리키는 또 하나의 식별자를 생성하는 문법입니다. 포인터와의 차이점, const 참조자, 선언 가능 범위, 매개변수 및 반환형 위치의 참조자 등에 대해 정리해보고자 합니다.","date":"May 6, 2024","category":"development","tags":["cpp","reference-syntax","syntax"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/862b00f9989397b428b1f96cb697dc8a/12a3e/cpp-reference-syntax-wide.png","srcSet":"/static/862b00f9989397b428b1f96cb697dc8a/9d9e0/cpp-reference-syntax-wide.png 225w,\n/static/862b00f9989397b428b1f96cb697dc8a/cc174/cpp-reference-syntax-wide.png 450w,\n/static/862b00f9989397b428b1f96cb697dc8a/12a3e/cpp-reference-syntax-wide.png 900w,\n/static/862b00f9989397b428b1f96cb697dc8a/4dd11/cpp-reference-syntax-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/862b00f9989397b428b1f96cb697dc8a/3f003/cpp-reference-syntax-wide.webp 225w,\n/static/862b00f9989397b428b1f96cb697dc8a/ba134/cpp-reference-syntax-wide.webp 450w,\n/static/862b00f9989397b428b1f96cb697dc8a/e7f7d/cpp-reference-syntax-wide.webp 900w,\n/static/862b00f9989397b428b1f96cb697dc8a/fc420/cpp-reference-syntax-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"cpp reference syntax image"},"id":"c89d17a4-48db-556d-8da1-b6662b3a129a","slug":"development/cpp-reference-syntax/"}],"pageInfo":{"currentPage":1,"hasNextPage":false,"hasPreviousPage":false,"pageCount":1,"totalCount":5}}},"pageContext":{"slug":"syntax","ko":"문법","skip":0}},
    "staticQueryHashes": ["1903006949","2193720160"]}