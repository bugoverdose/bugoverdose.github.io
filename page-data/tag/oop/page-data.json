{
    "componentChunkName": "component---src-templates-tag-js",
    "path": "/tag/oop",
    "result": {"data":{"allMdx":{"nodes":[{"frontmatter":{"title":"[발표] 객체지향 언어로서의 Go","description":"실무에서 Go를 사용한지 정확히 1년이 되었습니다. 작년에 Golang Korea 주관 행사에서 발표했던 내용의 요약과 함께 Go와 OOP에 대한 개인적인 생각을 정리해보고자 합니다.","date":"February 6, 2024","category":"essay","tags":["go","oop","presentation","retrospective"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#e8e8e8","images":{"fallback":{"src":"/static/2f71933488a805eaab5d52b60cf907e7/12a3e/object-oriented-go-wide.png","srcSet":"/static/2f71933488a805eaab5d52b60cf907e7/9d9e0/object-oriented-go-wide.png 225w,\n/static/2f71933488a805eaab5d52b60cf907e7/cc174/object-oriented-go-wide.png 450w,\n/static/2f71933488a805eaab5d52b60cf907e7/12a3e/object-oriented-go-wide.png 900w,\n/static/2f71933488a805eaab5d52b60cf907e7/4dd11/object-oriented-go-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/2f71933488a805eaab5d52b60cf907e7/3f003/object-oriented-go-wide.webp 225w,\n/static/2f71933488a805eaab5d52b60cf907e7/ba134/object-oriented-go-wide.webp 450w,\n/static/2f71933488a805eaab5d52b60cf907e7/e7f7d/object-oriented-go-wide.webp 900w,\n/static/2f71933488a805eaab5d52b60cf907e7/fc420/object-oriented-go-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"object oriented go image"},"id":"6ab50876-4d5b-530b-99bb-6d4bc6455ab6","slug":"essay/object-oriented-go-presentation/"},{"frontmatter":{"title":"[Go] 의존성 역전 원칙","description":"SOLID 중 D에 해당하는 의존성 역전 원칙에 대해 가볍게 설명하겠습니다. Go 코드에서 DIP를 적용할 경우 어떤 상황이 발생하는지를 예시 코드로 설명합니다.","date":"September 22, 2023","category":"development","tags":["go","oop","dip"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/09a78c09fa7b1618089ca007b4cc24ad/12a3e/dip-in-go-wide.png","srcSet":"/static/09a78c09fa7b1618089ca007b4cc24ad/9d9e0/dip-in-go-wide.png 225w,\n/static/09a78c09fa7b1618089ca007b4cc24ad/cc174/dip-in-go-wide.png 450w,\n/static/09a78c09fa7b1618089ca007b4cc24ad/12a3e/dip-in-go-wide.png 900w,\n/static/09a78c09fa7b1618089ca007b4cc24ad/4dd11/dip-in-go-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/09a78c09fa7b1618089ca007b4cc24ad/3f003/dip-in-go-wide.webp 225w,\n/static/09a78c09fa7b1618089ca007b4cc24ad/ba134/dip-in-go-wide.webp 450w,\n/static/09a78c09fa7b1618089ca007b4cc24ad/e7f7d/dip-in-go-wide.webp 900w,\n/static/09a78c09fa7b1618089ca007b4cc24ad/fc420/dip-in-go-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"dip in go image"},"id":"05ce150a-ec42-5b24-9742-94d7233f5947","slug":"development/dip-in-go/"},{"frontmatter":{"title":"[Go] 개방 폐쇄 원칙","description":"SOLID 중 O에 해당하는 개방 폐쇄 원칙에 대해 가볍게 설명하겠습니다. Go 코드에서 OCP를 적용하는 방법을 예시 코드로 설명합니다.","date":"September 21, 2023","category":"development","tags":["go","oop","ocp"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/abbfe074ee484e5ce54b72c8f3d69554/12a3e/ocp-in-go-wide.png","srcSet":"/static/abbfe074ee484e5ce54b72c8f3d69554/9d9e0/ocp-in-go-wide.png 225w,\n/static/abbfe074ee484e5ce54b72c8f3d69554/cc174/ocp-in-go-wide.png 450w,\n/static/abbfe074ee484e5ce54b72c8f3d69554/12a3e/ocp-in-go-wide.png 900w,\n/static/abbfe074ee484e5ce54b72c8f3d69554/4dd11/ocp-in-go-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/abbfe074ee484e5ce54b72c8f3d69554/3f003/ocp-in-go-wide.webp 225w,\n/static/abbfe074ee484e5ce54b72c8f3d69554/ba134/ocp-in-go-wide.webp 450w,\n/static/abbfe074ee484e5ce54b72c8f3d69554/e7f7d/ocp-in-go-wide.webp 900w,\n/static/abbfe074ee484e5ce54b72c8f3d69554/fc420/ocp-in-go-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"ocp in go image"},"id":"25ed695d-f6f5-5ce7-8a0f-de99271e4ae5","slug":"development/ocp-in-go/"},{"frontmatter":{"title":"[Go] 인터페이스 분리 원칙","description":"SOLID 중 I에 해당하는 인터페이스 분리 원칙에 대해 가볍게 설명하겠습니다. Go 코드에서 ISP를 적용하는 방법을 예시 코드로 설명합니다.","date":"September 20, 2023","category":"development","tags":["go","oop","isp"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/0a5d5fc19494a1d3a5fd60d594603e36/12a3e/isp-in-go-wide.png","srcSet":"/static/0a5d5fc19494a1d3a5fd60d594603e36/9d9e0/isp-in-go-wide.png 225w,\n/static/0a5d5fc19494a1d3a5fd60d594603e36/cc174/isp-in-go-wide.png 450w,\n/static/0a5d5fc19494a1d3a5fd60d594603e36/12a3e/isp-in-go-wide.png 900w,\n/static/0a5d5fc19494a1d3a5fd60d594603e36/4dd11/isp-in-go-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/0a5d5fc19494a1d3a5fd60d594603e36/3f003/isp-in-go-wide.webp 225w,\n/static/0a5d5fc19494a1d3a5fd60d594603e36/ba134/isp-in-go-wide.webp 450w,\n/static/0a5d5fc19494a1d3a5fd60d594603e36/e7f7d/isp-in-go-wide.webp 900w,\n/static/0a5d5fc19494a1d3a5fd60d594603e36/fc420/isp-in-go-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"isp in go image"},"id":"ce6258de-de51-5418-bf89-6db3739e568d","slug":"development/isp-in-go/"},{"frontmatter":{"title":"[Go] 추상화와 다형성","description":"Go 인터페이스를 통해 추상화와 다형성의 정의를 가볍게 설명하겠습니다.","date":"September 19, 2023","category":"development","tags":["go","oop","abstraction","polymorphism"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/29095862f9be24798bc1fe2078bcf596/12a3e/abstraction-and-polymorphism-wide.png","srcSet":"/static/29095862f9be24798bc1fe2078bcf596/9d9e0/abstraction-and-polymorphism-wide.png 225w,\n/static/29095862f9be24798bc1fe2078bcf596/cc174/abstraction-and-polymorphism-wide.png 450w,\n/static/29095862f9be24798bc1fe2078bcf596/12a3e/abstraction-and-polymorphism-wide.png 900w,\n/static/29095862f9be24798bc1fe2078bcf596/4dd11/abstraction-and-polymorphism-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/29095862f9be24798bc1fe2078bcf596/3f003/abstraction-and-polymorphism-wide.webp 225w,\n/static/29095862f9be24798bc1fe2078bcf596/ba134/abstraction-and-polymorphism-wide.webp 450w,\n/static/29095862f9be24798bc1fe2078bcf596/e7f7d/abstraction-and-polymorphism-wide.webp 900w,\n/static/29095862f9be24798bc1fe2078bcf596/fc420/abstraction-and-polymorphism-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"abstraction and polymorphism image"},"id":"f55479d6-0c95-5cec-aaf7-66f46992b0f1","slug":"development/abstraction-and-polymorphism-in-go/"},{"frontmatter":{"title":"[Go] 객체 조합과 필드의 종류","description":"익명 필드, exported/unexported 필드 등 다른 타입의 객체를 조합하는 방식에 따라 발생하는 차이점에 대해 상속 대신 조합이라는 맥락에서 비교합니다.","date":"September 17, 2023","category":"development","tags":["go","oop","composition"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/b3bae6d959b7213ffd985cc4223edbcc/12a3e/composition-in-go-wide.png","srcSet":"/static/b3bae6d959b7213ffd985cc4223edbcc/9d9e0/composition-in-go-wide.png 225w,\n/static/b3bae6d959b7213ffd985cc4223edbcc/cc174/composition-in-go-wide.png 450w,\n/static/b3bae6d959b7213ffd985cc4223edbcc/12a3e/composition-in-go-wide.png 900w,\n/static/b3bae6d959b7213ffd985cc4223edbcc/4dd11/composition-in-go-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/b3bae6d959b7213ffd985cc4223edbcc/3f003/composition-in-go-wide.webp 225w,\n/static/b3bae6d959b7213ffd985cc4223edbcc/ba134/composition-in-go-wide.webp 450w,\n/static/b3bae6d959b7213ffd985cc4223edbcc/e7f7d/composition-in-go-wide.webp 900w,\n/static/b3bae6d959b7213ffd985cc4223edbcc/fc420/composition-in-go-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"composition in go image"},"id":"1d28bbcc-306c-5983-b452-f225321d6a49","slug":"development/composition-in-go/"},{"frontmatter":{"title":"[OOP] 상속 대신 조합","description":"예시 코드를 통해 코드 재사용 목적의 상속의 문제점을 파악하고, 서브클래싱, 서브타이핑, 리스코프 치환원칙 등의 키워드를 통해 상속 대신 조합이라는 표현에 대해 정리하겠습니다.","date":"September 16, 2023","category":"development","tags":["oop","lsp","inheritance","composition"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/dbd62544f8d85c24933ba484afc0eca0/12a3e/composition-over-inheritance-wide.png","srcSet":"/static/dbd62544f8d85c24933ba484afc0eca0/9d9e0/composition-over-inheritance-wide.png 225w,\n/static/dbd62544f8d85c24933ba484afc0eca0/cc174/composition-over-inheritance-wide.png 450w,\n/static/dbd62544f8d85c24933ba484afc0eca0/12a3e/composition-over-inheritance-wide.png 900w,\n/static/dbd62544f8d85c24933ba484afc0eca0/4dd11/composition-over-inheritance-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/dbd62544f8d85c24933ba484afc0eca0/3f003/composition-over-inheritance-wide.webp 225w,\n/static/dbd62544f8d85c24933ba484afc0eca0/ba134/composition-over-inheritance-wide.webp 450w,\n/static/dbd62544f8d85c24933ba484afc0eca0/e7f7d/composition-over-inheritance-wide.webp 900w,\n/static/dbd62544f8d85c24933ba484afc0eca0/fc420/composition-over-inheritance-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"composition over inheritance image"},"id":"331f0bbf-2787-53b1-a922-62e0526b3efa","slug":"development/composition-over-inheritance/"},{"frontmatter":{"title":"[Go] 구조체 캡슐화하기","description":"캡슐화의 정의를 설명하고 Go 언어에서 캡슐화를 구현할 수 있는 방법과 한계에 대해 다뤄보겠습니다. 예제 코드를 통해 Go 구조체의 내부 구현을 숨기는 방안을 단계적으로 정리하겠습니다.","date":"September 13, 2023","category":"development","tags":["go","oop","encapsulation"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/54ed42ec8080265f23681e5b2b1e6673/12a3e/encapsulating-go-structs-wide.png","srcSet":"/static/54ed42ec8080265f23681e5b2b1e6673/9d9e0/encapsulating-go-structs-wide.png 225w,\n/static/54ed42ec8080265f23681e5b2b1e6673/cc174/encapsulating-go-structs-wide.png 450w,\n/static/54ed42ec8080265f23681e5b2b1e6673/12a3e/encapsulating-go-structs-wide.png 900w,\n/static/54ed42ec8080265f23681e5b2b1e6673/4dd11/encapsulating-go-structs-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/54ed42ec8080265f23681e5b2b1e6673/3f003/encapsulating-go-structs-wide.webp 225w,\n/static/54ed42ec8080265f23681e5b2b1e6673/ba134/encapsulating-go-structs-wide.webp 450w,\n/static/54ed42ec8080265f23681e5b2b1e6673/e7f7d/encapsulating-go-structs-wide.webp 900w,\n/static/54ed42ec8080265f23681e5b2b1e6673/fc420/encapsulating-go-structs-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"encapsulating go structs image"},"id":"9b5fe3d8-b384-53f6-8752-e695e594acad","slug":"development/encapsulating-go-structs/"},{"frontmatter":{"title":"[리뷰] 오브젝트 독후감","description":"스터디원들과 함께 조영호의 오브젝트를 완독하였다. 책에 대한 전반적인 후기를 남기고자 한다.","date":"June 24, 2022","category":"essay","tags":["oop","book-review","retrospective"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/df533aab78ad2ace48ba0128fca14494/12a3e/object-cover-wide.png","srcSet":"/static/df533aab78ad2ace48ba0128fca14494/9d9e0/object-cover-wide.png 225w,\n/static/df533aab78ad2ace48ba0128fca14494/cc174/object-cover-wide.png 450w,\n/static/df533aab78ad2ace48ba0128fca14494/12a3e/object-cover-wide.png 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/df533aab78ad2ace48ba0128fca14494/3f003/object-cover-wide.webp 225w,\n/static/df533aab78ad2ace48ba0128fca14494/ba134/object-cover-wide.webp 450w,\n/static/df533aab78ad2ace48ba0128fca14494/e7f7d/object-cover-wide.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"object cover image"},"id":"8e1da8a7-0683-55c7-a353-8e4ff8f3e14e","slug":"essay/object-book-review/"},{"frontmatter":{"title":"[OOP] SOLID 압축 정리본","description":"우아한테크코스 레벨 인터뷰 준비 과정에서 작성한 SOLID에 대한 개념 정리이다. 너무 깊지도, 얕지도 않도록 최소한의 예제만을 활용한 압축본을 만드는 것을 목표로 하였다. 오브젝트 스터디 종료 후 수정할 계획이다.","date":"April 26, 2022","category":"computer-science","tags":["oop","srp","ocp","lsp","isp","dip"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/782dfc0465da57291e95692f6860f8f8/12a3e/solid-wide.png","srcSet":"/static/782dfc0465da57291e95692f6860f8f8/9d9e0/solid-wide.png 225w,\n/static/782dfc0465da57291e95692f6860f8f8/cc174/solid-wide.png 450w,\n/static/782dfc0465da57291e95692f6860f8f8/12a3e/solid-wide.png 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/782dfc0465da57291e95692f6860f8f8/3f003/solid-wide.webp 225w,\n/static/782dfc0465da57291e95692f6860f8f8/ba134/solid-wide.webp 450w,\n/static/782dfc0465da57291e95692f6860f8f8/e7f7d/solid-wide.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"solid image"},"id":"31c53484-fab6-5a85-866c-46c21dd3e22c","slug":"computer-science/solid-basics/"}],"pageInfo":{"currentPage":1,"hasNextPage":true,"hasPreviousPage":false,"pageCount":2,"totalCount":12}}},"pageContext":{"slug":"oop","ko":"OOP","skip":0}},
    "staticQueryHashes": ["1903006949","2193720160"]}