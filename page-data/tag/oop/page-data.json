{
    "componentChunkName": "component---src-templates-tag-js",
    "path": "/tag/oop",
    "result": {"data":{"allMdx":{"nodes":[{"frontmatter":{"title":"[Go] 객체 조합과 필드의 종류","description":"익명 필드, exported/unexported 필드 등 다른 타입의 객체를 조합하는 방식에 따라 발생하는 차이점에 대해 상속 대신 조합이라는 맥락에서 비교합니다.","date":"September 17, 2023","category":"development","tags":["go","oop","composition"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/b3bae6d959b7213ffd985cc4223edbcc/12a3e/composition-in-go-wide.png","srcSet":"/static/b3bae6d959b7213ffd985cc4223edbcc/9d9e0/composition-in-go-wide.png 225w,\n/static/b3bae6d959b7213ffd985cc4223edbcc/cc174/composition-in-go-wide.png 450w,\n/static/b3bae6d959b7213ffd985cc4223edbcc/12a3e/composition-in-go-wide.png 900w,\n/static/b3bae6d959b7213ffd985cc4223edbcc/4dd11/composition-in-go-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/b3bae6d959b7213ffd985cc4223edbcc/3f003/composition-in-go-wide.webp 225w,\n/static/b3bae6d959b7213ffd985cc4223edbcc/ba134/composition-in-go-wide.webp 450w,\n/static/b3bae6d959b7213ffd985cc4223edbcc/e7f7d/composition-in-go-wide.webp 900w,\n/static/b3bae6d959b7213ffd985cc4223edbcc/fc420/composition-in-go-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"composition in go image"},"id":"1d28bbcc-306c-5983-b452-f225321d6a49","slug":"development/composition-in-go/"},{"frontmatter":{"title":"[OOP] 상속 대신 조합","description":"예시 코드를 통해 코드 재사용 목적의 상속의 문제점을 파악하고, 서브클래싱, 서브타이핑, 리스코프 치환원칙 등의 키워드를 통해 상속 대신 조합이라는 표현에 대해 정리하겠습니다.","date":"September 16, 2023","category":"development","tags":["oop","lsp","inheritance","composition"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/dbd62544f8d85c24933ba484afc0eca0/12a3e/composition-over-inheritance-wide.png","srcSet":"/static/dbd62544f8d85c24933ba484afc0eca0/9d9e0/composition-over-inheritance-wide.png 225w,\n/static/dbd62544f8d85c24933ba484afc0eca0/cc174/composition-over-inheritance-wide.png 450w,\n/static/dbd62544f8d85c24933ba484afc0eca0/12a3e/composition-over-inheritance-wide.png 900w,\n/static/dbd62544f8d85c24933ba484afc0eca0/4dd11/composition-over-inheritance-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/dbd62544f8d85c24933ba484afc0eca0/3f003/composition-over-inheritance-wide.webp 225w,\n/static/dbd62544f8d85c24933ba484afc0eca0/ba134/composition-over-inheritance-wide.webp 450w,\n/static/dbd62544f8d85c24933ba484afc0eca0/e7f7d/composition-over-inheritance-wide.webp 900w,\n/static/dbd62544f8d85c24933ba484afc0eca0/fc420/composition-over-inheritance-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"composition over inheritance image"},"id":"331f0bbf-2787-53b1-a922-62e0526b3efa","slug":"development/composition-over-inheritance/"},{"frontmatter":{"title":"[Go] 구조체 캡슐화하기","description":"캡슐화의 정의를 설명하고 Go 언어에서 캡슐화를 구현할 수 있는 방법과 한계에 대해 다뤄보겠습니다. 예제 코드를 통해 Go 구조체의 내부 구현을 숨기는 방안을 단계적으로 정리하겠습니다.","date":"September 13, 2023","category":"development","tags":["go","oop","encapsulation"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/54ed42ec8080265f23681e5b2b1e6673/12a3e/encapsulating-go-structs-wide.png","srcSet":"/static/54ed42ec8080265f23681e5b2b1e6673/9d9e0/encapsulating-go-structs-wide.png 225w,\n/static/54ed42ec8080265f23681e5b2b1e6673/cc174/encapsulating-go-structs-wide.png 450w,\n/static/54ed42ec8080265f23681e5b2b1e6673/12a3e/encapsulating-go-structs-wide.png 900w,\n/static/54ed42ec8080265f23681e5b2b1e6673/4dd11/encapsulating-go-structs-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/54ed42ec8080265f23681e5b2b1e6673/3f003/encapsulating-go-structs-wide.webp 225w,\n/static/54ed42ec8080265f23681e5b2b1e6673/ba134/encapsulating-go-structs-wide.webp 450w,\n/static/54ed42ec8080265f23681e5b2b1e6673/e7f7d/encapsulating-go-structs-wide.webp 900w,\n/static/54ed42ec8080265f23681e5b2b1e6673/fc420/encapsulating-go-structs-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"encapsulating go structs image"},"id":"9b5fe3d8-b384-53f6-8752-e695e594acad","slug":"development/encapsulating-go-structs/"},{"frontmatter":{"title":"[리뷰] 오브젝트 독후감","description":"스터디원들과 함께 조영호의 오브젝트를 완독하였다. 책에 대한 전반적인 후기를 남기고자 한다.","date":"June 24, 2022","category":"essay","tags":["oop","book-review","retrospective"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/df533aab78ad2ace48ba0128fca14494/12a3e/object-cover-wide.png","srcSet":"/static/df533aab78ad2ace48ba0128fca14494/9d9e0/object-cover-wide.png 225w,\n/static/df533aab78ad2ace48ba0128fca14494/cc174/object-cover-wide.png 450w,\n/static/df533aab78ad2ace48ba0128fca14494/12a3e/object-cover-wide.png 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/df533aab78ad2ace48ba0128fca14494/3f003/object-cover-wide.webp 225w,\n/static/df533aab78ad2ace48ba0128fca14494/ba134/object-cover-wide.webp 450w,\n/static/df533aab78ad2ace48ba0128fca14494/e7f7d/object-cover-wide.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"object cover image"},"id":"8e1da8a7-0683-55c7-a353-8e4ff8f3e14e","slug":"essay/object-book-review/"},{"frontmatter":{"title":"[OOP] SOLID 압축 정리본","description":"우아한테크코스 레벨 인터뷰 준비 과정에서 작성한 SOLID에 대한 개념 정리이다. 너무 깊지도, 얕지도 않도록 최소한의 예제만을 활용한 압축본을 만드는 것을 목표로 하였다. 오브젝트 스터디 종료 후 수정할 계획이다.","date":"April 26, 2022","category":"computer-science","tags":["oop","srp","ocp","lsp","isp","dip"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/782dfc0465da57291e95692f6860f8f8/12a3e/solid-wide.png","srcSet":"/static/782dfc0465da57291e95692f6860f8f8/9d9e0/solid-wide.png 225w,\n/static/782dfc0465da57291e95692f6860f8f8/cc174/solid-wide.png 450w,\n/static/782dfc0465da57291e95692f6860f8f8/12a3e/solid-wide.png 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/782dfc0465da57291e95692f6860f8f8/3f003/solid-wide.webp 225w,\n/static/782dfc0465da57291e95692f6860f8f8/ba134/solid-wide.webp 450w,\n/static/782dfc0465da57291e95692f6860f8f8/e7f7d/solid-wide.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"solid image"},"id":"31c53484-fab6-5a85-866c-46c21dd3e22c","slug":"computer-science/solid-basics/"},{"frontmatter":{"title":"[Java] 값 객체: 동등성과 동일성","description":"동등성과 동일성 개념을 토대로 값과 객체를 비교해보고, 값 객체에 대해 이해해보자. 로또 번호와 위치 정보를 값 객체로 구현해보고, 체스말의 이동경로 검증 예시를 통해 값 객체가 지니는 이점에 대해 알아보자.","date":"April 9, 2022","category":"development","tags":["java","value-object","object","oop"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/7b7817b3ed441a4700ba4673be9e260a/12a3e/value-object-wide.png","srcSet":"/static/7b7817b3ed441a4700ba4673be9e260a/9d9e0/value-object-wide.png 225w,\n/static/7b7817b3ed441a4700ba4673be9e260a/cc174/value-object-wide.png 450w,\n/static/7b7817b3ed441a4700ba4673be9e260a/12a3e/value-object-wide.png 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/7b7817b3ed441a4700ba4673be9e260a/3f003/value-object-wide.webp 225w,\n/static/7b7817b3ed441a4700ba4673be9e260a/ba134/value-object-wide.webp 450w,\n/static/7b7817b3ed441a4700ba4673be9e260a/e7f7d/value-object-wide.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"value object image"},"id":"ada49ef6-4774-589e-99bc-5a96cd5cef07","slug":"development/value-object/"},{"frontmatter":{"title":"클래스와 프로토타입에 담긴 철학","description":"우테코 강의 중 클래스라는 개념이 플라톤의 이데아 개념에 기반을 두고 있다는 내용이 나왔다. 다만, 코치님이 이 부분에 대해 너무 가볍게 다룬 것 같아 정말 마음이 아팠다. 그런 의미에서 그 분이 쏘아올린 작은 공을 살짝 리시브해보고자 한다.","date":"February 17, 2022","category":"computer-science","tags":["oop","philosophy","java","javascript"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/5c5b393bfd433e110e2ef9c24ca5ace1/ba2c4/plato-wittgenstein.jpg","srcSet":"/static/5c5b393bfd433e110e2ef9c24ca5ace1/70c4d/plato-wittgenstein.jpg 185w,\n/static/5c5b393bfd433e110e2ef9c24ca5ace1/bfbf1/plato-wittgenstein.jpg 370w,\n/static/5c5b393bfd433e110e2ef9c24ca5ace1/ba2c4/plato-wittgenstein.jpg 740w","sizes":"(min-width: 740px) 740px, 100vw"},"sources":[{"srcSet":"/static/5c5b393bfd433e110e2ef9c24ca5ace1/a3685/plato-wittgenstein.webp 185w,\n/static/5c5b393bfd433e110e2ef9c24ca5ace1/3c007/plato-wittgenstein.webp 370w,\n/static/5c5b393bfd433e110e2ef9c24ca5ace1/177c9/plato-wittgenstein.webp 740w","type":"image/webp","sizes":"(min-width: 740px) 740px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"plato vs wittgenstein image"},"id":"a82b0dda-ae9d-5433-8cba-ee1668edced3","slug":"computer-science/class-vs-prototype-philosophy/"}],"pageInfo":{"currentPage":1,"hasNextPage":false,"hasPreviousPage":false,"pageCount":1,"totalCount":7}}},"pageContext":{"slug":"oop","ko":"OOP","skip":0}},
    "staticQueryHashes": ["1903006949","2193720160"]}