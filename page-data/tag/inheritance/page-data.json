{
    "componentChunkName": "component---src-templates-tag-js",
    "path": "/tag/inheritance",
    "result": {"data":{"allMdx":{"nodes":[{"frontmatter":{"title":"[C++] 접근제어자와 상속","description":"C++에서는 상위클래스의 멤버들을 상속받을 때 접근제어자를 변형시킬 수 있는 문법을 제공합니다. 접근제어자들에 대해 가볍게 다루고, public 상속, protected 상속, private 상속에 대해 정리해보겠습니다.","date":"June 8, 2024","category":"development","tags":["cpp","access-modifier","public-keyword","protected-keyword","private-keyword","inheritance","syntax"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/20e762b9d09e6ba2ad7ce65c6f144813/12a3e/cpp-access-modifier-and-inheritance-wide.png","srcSet":"/static/20e762b9d09e6ba2ad7ce65c6f144813/9d9e0/cpp-access-modifier-and-inheritance-wide.png 225w,\n/static/20e762b9d09e6ba2ad7ce65c6f144813/cc174/cpp-access-modifier-and-inheritance-wide.png 450w,\n/static/20e762b9d09e6ba2ad7ce65c6f144813/12a3e/cpp-access-modifier-and-inheritance-wide.png 900w,\n/static/20e762b9d09e6ba2ad7ce65c6f144813/4dd11/cpp-access-modifier-and-inheritance-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/20e762b9d09e6ba2ad7ce65c6f144813/3f003/cpp-access-modifier-and-inheritance-wide.webp 225w,\n/static/20e762b9d09e6ba2ad7ce65c6f144813/ba134/cpp-access-modifier-and-inheritance-wide.webp 450w,\n/static/20e762b9d09e6ba2ad7ce65c6f144813/e7f7d/cpp-access-modifier-and-inheritance-wide.webp 900w,\n/static/20e762b9d09e6ba2ad7ce65c6f144813/fc420/cpp-access-modifier-and-inheritance-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"cpp access modifier and inheritance image"},"id":"37d98096-52c5-514f-a340-6d1806f80e49","slug":"development/cpp-access-modifier-and-inheritance/"},{"frontmatter":{"title":"[C++] 다형성과 가상 함수","description":"C++에서 다형성을 구현하기 위해 필수적으로 알아야 하는 기초 개념 및 문법을 간단히 정리하였습니다. 추가로 Java와의 비교를 통해 가상함수의 필요성을 정리하였습니다.","date":"June 8, 2024","category":"development","tags":["cpp","inheritance","syntax","java"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/235bd275b6e4b3c0be12bec9b2d742d1/12a3e/cpp-polymorphism-and-virtual-function-wide.png","srcSet":"/static/235bd275b6e4b3c0be12bec9b2d742d1/9d9e0/cpp-polymorphism-and-virtual-function-wide.png 225w,\n/static/235bd275b6e4b3c0be12bec9b2d742d1/cc174/cpp-polymorphism-and-virtual-function-wide.png 450w,\n/static/235bd275b6e4b3c0be12bec9b2d742d1/12a3e/cpp-polymorphism-and-virtual-function-wide.png 900w,\n/static/235bd275b6e4b3c0be12bec9b2d742d1/4dd11/cpp-polymorphism-and-virtual-function-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/235bd275b6e4b3c0be12bec9b2d742d1/3f003/cpp-polymorphism-and-virtual-function-wide.webp 225w,\n/static/235bd275b6e4b3c0be12bec9b2d742d1/ba134/cpp-polymorphism-and-virtual-function-wide.webp 450w,\n/static/235bd275b6e4b3c0be12bec9b2d742d1/e7f7d/cpp-polymorphism-and-virtual-function-wide.webp 900w,\n/static/235bd275b6e4b3c0be12bec9b2d742d1/fc420/cpp-polymorphism-and-virtual-function-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"cpp polymorphism and virtual function image"},"id":"a334dea1-745b-55db-999f-3f110318cce0","slug":"development/cpp-polymorphism-and-virtual-function/"},{"frontmatter":{"title":"[OOP] 상속 대신 조합","description":"예시 코드를 통해 코드 재사용 목적의 상속의 문제점을 파악하고, 서브클래싱, 서브타이핑, 리스코프 치환원칙 등의 키워드를 통해 상속 대신 조합이라는 표현에 대해 정리하겠습니다.","date":"September 16, 2023","category":"development","tags":["oop","lsp","inheritance","composition"],"hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/dbd62544f8d85c24933ba484afc0eca0/12a3e/composition-over-inheritance-wide.png","srcSet":"/static/dbd62544f8d85c24933ba484afc0eca0/9d9e0/composition-over-inheritance-wide.png 225w,\n/static/dbd62544f8d85c24933ba484afc0eca0/cc174/composition-over-inheritance-wide.png 450w,\n/static/dbd62544f8d85c24933ba484afc0eca0/12a3e/composition-over-inheritance-wide.png 900w,\n/static/dbd62544f8d85c24933ba484afc0eca0/4dd11/composition-over-inheritance-wide.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/dbd62544f8d85c24933ba484afc0eca0/3f003/composition-over-inheritance-wide.webp 225w,\n/static/dbd62544f8d85c24933ba484afc0eca0/ba134/composition-over-inheritance-wide.webp 450w,\n/static/dbd62544f8d85c24933ba484afc0eca0/e7f7d/composition-over-inheritance-wide.webp 900w,\n/static/dbd62544f8d85c24933ba484afc0eca0/fc420/composition-over-inheritance-wide.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":450}}},"hero_image_alt":"composition over inheritance image"},"id":"331f0bbf-2787-53b1-a922-62e0526b3efa","slug":"development/composition-over-inheritance/"}],"pageInfo":{"currentPage":1,"hasNextPage":false,"hasPreviousPage":false,"pageCount":1,"totalCount":3}}},"pageContext":{"slug":"inheritance","ko":"상속","skip":0}},
    "staticQueryHashes": ["1903006949","2193720160"]}